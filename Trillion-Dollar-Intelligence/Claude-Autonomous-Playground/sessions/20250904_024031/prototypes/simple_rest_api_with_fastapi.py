#!/usr/bin/env python3
"""
Simple REST API with FastAPI
Auto-generated by Local Autonomous System
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Dict, Any
import uvicorn
import json
from datetime import datetime

app = FastAPI(title="Autonomous Generated API", version="1.0.0")

# Data storage (in-memory for simplicity)
data_store: Dict[str, Any] = {}

class Item(BaseModel):
    name: str
    description: str
    value: Any

@app.get("/")
async def root():
    return {"message": "Autonomous API is running", "generated_at": datetime.now().isoformat()}

@app.post("/items/")
async def create_item(item: Item):
    item_id = str(len(data_store) + 1)
    data_store[item_id] = {
        "id": item_id,
        "name": item.name,
        "description": item.description,
        "value": item.value,
        "created_at": datetime.now().isoformat()
    }
    return data_store[item_id]

@app.get("/items/")
async def list_items():
    return {"items": list(data_store.values()), "count": len(data_store)}

@app.get("/items/{item_id}")
async def get_item(item_id: str):
    if item_id not in data_store:
        raise HTTPException(status_code=404, detail="Item not found")
    return data_store[item_id]

@app.delete("/items/{item_id}")
async def delete_item(item_id: str):
    if item_id not in data_store:
        raise HTTPException(status_code=404, detail="Item not found")
    deleted_item = data_store.pop(item_id)
    return {"message": "Item deleted", "item": deleted_item}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
