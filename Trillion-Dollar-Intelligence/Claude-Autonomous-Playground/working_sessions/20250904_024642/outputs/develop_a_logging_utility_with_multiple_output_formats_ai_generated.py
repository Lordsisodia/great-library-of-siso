#!/usr/bin/env python3
"""
Develop a logging utility with multiple output formats
AI-Generated by Working Autonomous System
Generated at: 2025-09-04T02:47:17.740357
"""

# AI-Generated Implementation:
**Logging Utility with Multiple Output Formats**
=====================================================

This module provides a logging utility with multiple output formats, including console, file, and rotating file.

**Installation**
---------------

You can install the required packages using pip:

```bash
pip install colorlog
```

**Code**
------

```python
import logging
import colorlog
import logging.handlers
from typing import Optional

# Define the logger configuration
class LoggerConfig:
    LEVELS = {
        "DEBUG": logging.DEBUG,
        "INFO": logging.INFO,
        "WARNING": logging.WARNING,
        "ERROR": logging.ERROR,
        "CRITICAL": logging.CRITICAL,
    }

class Logger:
    def __init__(self, name: str, level: str = "INFO", format: Optional[str] = None):
        """
        Initializes the logger.

        Args:
            name (str): The name of the logger.
            level (str, optional): The logging level. Defaults to "INFO".
            format (Optional[str], optional): The logging format. Defaults to None.
        """
        self.name = name
        self.level = LoggerConfig.LEVELS[level.upper()]
        self.format = format or "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

        # Create the logger
        self.logger = logging.getLogger(name)
        self.logger.setLevel(self.level)

        # Create a console handler
        console_handler = logging.StreamHandler()
        console_handler.setLevel(self.level)
        console_handler.setFormatter(self._get_formatter())

        # Create a file handler
        file_handler = logging.FileHandler("log.log")
        file_handler.setLevel(self.level)
        file_handler.setFormatter(self._get_formatter())

        # Create a rotating file handler
        rotating_file_handler = logging.handlers.RotatingFileHandler("log.log", maxBytes=1024 * 1024 * 5, backupCount=3)
        rotating_file_handler.setLevel(self.level)
        rotating_file_handler.setFormatter(self._get_formatter())

        # Add the handlers to the logger
        self.logger.addHandler(console_handler)
        self.logger.addHandler(file_handler)
        self.logger.addHandler(rotating_file_handler)

    def _get_formatter(self) -> logging.Formatter:
        """
        Returns a formatter instance.

        Returns:
            logging.Formatter: A formatter instance.
        """
        return colorlog.ColoredFormatter(self.format)

    def debug(self, msg: str):
        """
        Logs a debug message.

        Args:


# Additional autonomous enhancements
if __name__ == "__main__":
    print(f"AI-generated Develop a logging utility with multiple output formats - Ready for execution!")
