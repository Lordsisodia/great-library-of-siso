#!/bin/bash

# SISO Universal Claude Enhancement
# Replaces the default Claude experience with SISO-enhanced version

# Path to original Claude
ORIGINAL_CLAUDE="/Users/shaansisodia/.npm-global/bin/claude-original"

# Check for vanilla flag (escape hatch to original experience)
if [[ "$1" == "--vanilla" ]]; then
    shift
    exec "$ORIGINAL_CLAUDE" "$@"
fi

# Quick project intelligence gathering (async, non-blocking)
get_project_intelligence() {
    local project_info=""
    local git_info=""
    
    # Get project type
    if [[ -f "package.json" ]]; then
        if grep -q "react" package.json 2>/dev/null; then
            project_info="üì¶ React/TS"
        elif grep -q "next" package.json 2>/dev/null; then
            project_info="üì¶ Next.js"
        else
            project_info="üì¶ Node.js"
        fi
        
        # Check if deps are installed
        if [[ ! -d "node_modules" ]]; then
            project_info="$project_info ‚ö†Ô∏è deps"
        else
            project_info="$project_info ‚úÖ"
        fi
    elif [[ -f "requirements.txt" ]] || [[ -f "pyproject.toml" ]]; then
        project_info="üêç Python"
    elif [[ -f "Cargo.toml" ]]; then
        project_info="ü¶Ä Rust"
    elif [[ -f "go.mod" ]]; then
        project_info="üêπ Go"
    fi
    
    # Get git status
    if [[ -d ".git" ]]; then
        local branch=$(git branch --show-current 2>/dev/null || echo "detached")
        local status=$(git status --porcelain 2>/dev/null | wc -l | tr -d ' ')
        
        if [[ $status -eq 0 ]]; then
            git_info="üåø $branch ‚úÖ"
        else
            git_info="üåø $branch ‚ö†Ô∏è$status"
        fi
    fi
    
    echo "$project_info ‚Ä¢ $git_info"
}

# Get current directory info
CURRENT_DIR=$(basename "$PWD")
PROJECT_INTELLIGENCE=$(get_project_intelligence)

# Special SISO project detection
if [[ "$CURRENT_DIR" == *"SISO"* ]] || [[ "$PWD" == *"SISO"* ]]; then
    SISO_MARKER="üåü SISO PROJECT"
    PROJECT_INTELLIGENCE="$SISO_MARKER ‚Ä¢ $PROJECT_INTELLIGENCE"
fi

# Display enhanced SISO welcome (replaces Claude's default welcome)
cat << EOF
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                             ‚îÇ
‚îÇ   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                              ‚îÇ
‚îÇ   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó                             ‚îÇ
‚îÇ   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                             ‚îÇ
‚îÇ   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë                             ‚îÇ
‚îÇ   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù                             ‚îÇ
‚îÇ   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                              ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ  üöÄ SISO Enhanced Claude Code                               ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ  /help for help, /status for your current setup            ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ  üìç cwd: $PWD
EOF

# Show project intelligence if available
if [[ -n "$PROJECT_INTELLIGENCE" && "$PROJECT_INTELLIGENCE" != " ‚Ä¢ " ]]; then
    printf "‚îÇ  %s\n" "$PROJECT_INTELLIGENCE"
fi

cat << 'EOF'
‚îÇ                                                             ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

EOF

# Launch original Claude with all arguments
exec node "$ORIGINAL_CLAUDE" "$@"